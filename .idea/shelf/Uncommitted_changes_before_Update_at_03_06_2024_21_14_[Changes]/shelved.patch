Index: tests/reports/test-report.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\"/>\r\n    <title id=\"head-title\">test-report.html</title>\r\n      <link href=\"assets\\style.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n  </head>\r\n  <body>\r\n    <h1 id=\"title\">test-report.html</h1>\r\n    <p>Report generated on 30-May-2024 at 21:43:38 by <a href=\"https://pypi.python.org/pypi/pytest-html\">pytest-html</a>\r\n        v4.1.1</p>\r\n    <div id=\"environment-header\">\r\n      <h2>Environment</h2>\r\n    </div>\r\n    <table id=\"environment\"></table>\r\n    <!-- TEMPLATES -->\r\n      <template id=\"template_environment_row\">\r\n      <tr>\r\n        <td></td>\r\n        <td></td>\r\n      </tr>\r\n    </template>\r\n    <template id=\"template_results-table__body--empty\">\r\n      <tbody class=\"results-table-row\">\r\n        <tr id=\"not-found-message\">\r\n          <td colspan=\"4\">No results found. Check the filters.</th>\r\n        </tr>\r\n    </template>\r\n    <template id=\"template_results-table__tbody\">\r\n      <tbody class=\"results-table-row\">\r\n        <tr class=\"collapsible\">\r\n        </tr>\r\n        <tr class=\"extras-row\">\r\n          <td class=\"extra\" colspan=\"4\">\r\n            <div class=\"extraHTML\"></div>\r\n            <div class=\"media\">\r\n              <div class=\"media-container\">\r\n                  <div class=\"media-container__nav--left\"><</div>\r\n                  <div class=\"media-container__viewport\">\r\n                    <img src=\"\" />\r\n                    <video controls>\r\n                      <source src=\"\" type=\"video/mp4\">\r\n                    </video>\r\n                  </div>\r\n                  <div class=\"media-container__nav--right\">></div>\r\n                </div>\r\n                <div class=\"media__name\"></div>\r\n                <div class=\"media__counter\"></div>\r\n            </div>\r\n            <div class=\"logwrapper\">\r\n              <div class=\"logexpander\"></div>\r\n              <div class=\"log\"></div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </template>\r\n    <!-- END TEMPLATES -->\r\n    <div class=\"summary\">\r\n      <div class=\"summary__data\">\r\n        <h2>Summary</h2>\r\n        <div class=\"additional-summary prefix\">\r\n        </div>\r\n        <p class=\"run-count\">8 tests took 6 ms.</p>\r\n        <p class=\"filter\">(Un)check the boxes to filter the results.</p>\r\n        <div class=\"summary__reload\">\r\n          <div class=\"summary__reload__button hidden\" onclick=\"location.reload()\">\r\n            <div>There are still tests running. <br />Reload this page to get the latest results!</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"summary__spacer\"></div>\r\n        <div class=\"controls\">\r\n          <div class=\"filters\">\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"failed\" disabled/>\r\n            <span class=\"failed\">0 Failed,</span>\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"passed\" />\r\n            <span class=\"passed\">8 Passed,</span>\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"skipped\" disabled/>\r\n            <span class=\"skipped\">0 Skipped,</span>\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"xfailed\" disabled/>\r\n            <span class=\"xfailed\">0 Expected failures,</span>\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"xpassed\" disabled/>\r\n            <span class=\"xpassed\">0 Unexpected passes,</span>\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"error\" disabled/>\r\n            <span class=\"error\">0 Errors,</span>\r\n            <input checked=\"true\" class=\"filter\" name=\"filter_checkbox\" type=\"checkbox\" data-test-result=\"rerun\" disabled/>\r\n            <span class=\"rerun\">0 Reruns</span>\r\n          </div>\r\n          <div class=\"collapse\">\r\n            <button id=\"show_all_details\">Show all details</button>&nbsp;/&nbsp;<button id=\"hide_all_details\">Hide all details</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"additional-summary summary\">\r\n      </div>\r\n      <div class=\"additional-summary postfix\">\r\n      </div>\r\n    </div>\r\n    <table id=\"results-table\">\r\n      <thead id=\"results-table-head\">\r\n        <tr>\r\n          <th class=\"sortable\" data-column-type=\"result\">Result</th>\r\n          <th class=\"sortable\" data-column-type=\"testId\">Test</th>\r\n          <th class=\"sortable\" data-column-type=\"duration\">Duration</th>\r\n          <th>Links</th>\r\n        </tr>\r\n      </thead>\r\n    </table>\r\n  </body>\r\n  <footer>\r\n    <div id=\"data-container\" data-jsonblob=\"{&#34;environment&#34;: {&#34;Python&#34;: &#34;3.12.2&#34;, &#34;Platform&#34;: &#34;Windows-10-10.0.19045-SP0&#34;, &#34;Packages&#34;: {&#34;pytest&#34;: &#34;8.2.1&#34;, &#34;pluggy&#34;: &#34;1.5.0&#34;}, &#34;Plugins&#34;: {&#34;html&#34;: &#34;4.1.1&#34;, &#34;metadata&#34;: &#34;3.1.1&#34;}}, &#34;tests&#34;: {&#34;test_cell.py::TestCell::test_init&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_init&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_init&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_next_mark_state_is_closed&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_next_mark_state_is_closed&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_next_mark_state_is_closed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_next_mark_state_is_opened&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_next_mark_state_is_opened&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_next_mark_state_is_opened&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_next_mark_state_is_questioned&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_next_mark_state_is_questioned&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_next_mark_state_is_questioned&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_closed&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_closed&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_open_state_is_closed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_flagged&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_flagged&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_open_state_is_flagged&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_opened&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_opened&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_open_state_is_opened&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_questioned&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_questioned&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\\&#34;col-result\\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-testId\\&#34;&gt;test_cell.py::TestCell::test_open_state_is_questioned&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-duration\\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\\&#34;col-links\\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}]}, &#34;renderCollapsed&#34;: [&#34;passed&#34;], &#34;initialSort&#34;: &#34;result&#34;, &#34;title&#34;: &#34;test-report.html&#34;}\"></div>\r\n    <script>\r\n      (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\r\nconst { getCollapsedCategory, setCollapsedIds } = require('./storage.js')\r\n\r\nclass DataManager {\r\n    setManager(data) {\r\n        const collapsedCategories = [...getCollapsedCategory(data.renderCollapsed)]\r\n        const collapsedIds = []\r\n        const tests = Object.values(data.tests).flat().map((test, index) => {\r\n            const collapsed = collapsedCategories.includes(test.result.toLowerCase())\r\n            const id = `test_${index}`\r\n            if (collapsed) {\r\n                collapsedIds.push(id)\r\n            }\r\n            return {\r\n                ...test,\r\n                id,\r\n                collapsed,\r\n            }\r\n        })\r\n        const dataBlob = { ...data, tests }\r\n        this.data = { ...dataBlob }\r\n        this.renderData = { ...dataBlob }\r\n        setCollapsedIds(collapsedIds)\r\n    }\r\n\r\n    get allData() {\r\n        return { ...this.data }\r\n    }\r\n\r\n    resetRender() {\r\n        this.renderData = { ...this.data }\r\n    }\r\n\r\n    setRender(data) {\r\n        this.renderData.tests = [...data]\r\n    }\r\n\r\n    toggleCollapsedItem(id) {\r\n        this.renderData.tests = this.renderData.tests.map((test) =>\r\n            test.id === id ? { ...test, collapsed: !test.collapsed } : test,\r\n        )\r\n    }\r\n\r\n    set allCollapsed(collapsed) {\r\n        this.renderData = { ...this.renderData, tests: [...this.renderData.tests.map((test) => (\r\n            { ...test, collapsed }\r\n        ))] }\r\n    }\r\n\r\n    get testSubset() {\r\n        return [...this.renderData.tests]\r\n    }\r\n\r\n    get environment() {\r\n        return this.renderData.environment\r\n    }\r\n\r\n    get initialSort() {\r\n        return this.data.initialSort\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    manager: new DataManager(),\r\n}\r\n\r\n},{\"./storage.js\":8}],2:[function(require,module,exports){\r\nconst mediaViewer = require('./mediaviewer.js')\r\nconst templateEnvRow = document.getElementById('template_environment_row')\r\nconst templateResult = document.getElementById('template_results-table__tbody')\r\n\r\nfunction htmlToElements(html) {\r\n    const temp = document.createElement('template')\r\n    temp.innerHTML = html\r\n    return temp.content.childNodes\r\n}\r\n\r\nconst find = (selector, elem) => {\r\n    if (!elem) {\r\n        elem = document\r\n    }\r\n    return elem.querySelector(selector)\r\n}\r\n\r\nconst findAll = (selector, elem) => {\r\n    if (!elem) {\r\n        elem = document\r\n    }\r\n    return [...elem.querySelectorAll(selector)]\r\n}\r\n\r\nconst dom = {\r\n    getStaticRow: (key, value) => {\r\n        const envRow = templateEnvRow.content.cloneNode(true)\r\n        const isObj = typeof value === 'object' && value !== null\r\n        const values = isObj ? Object.keys(value).map((k) => `${k}: ${value[k]}`) : null\r\n\r\n        const valuesElement = htmlToElements(\r\n            values ? `<ul>${values.map((val) => `<li>${val}</li>`).join('')}<ul>` : `<div>${value}</div>`)[0]\r\n        const td = findAll('td', envRow)\r\n        td[0].textContent = key\r\n        td[1].appendChild(valuesElement)\r\n\r\n        return envRow\r\n    },\r\n    getResultTBody: ({ testId, id, log, extras, resultsTableRow, tableHtml, result, collapsed }) => {\r\n        const resultBody = templateResult.content.cloneNode(true)\r\n        resultBody.querySelector('tbody').classList.add(result.toLowerCase())\r\n        resultBody.querySelector('tbody').id = testId\r\n        resultBody.querySelector('.collapsible').dataset.id = id\r\n\r\n        resultsTableRow.forEach((html) => {\r\n            const t = document.createElement('template')\r\n            t.innerHTML = html\r\n            resultBody.querySelector('.collapsible').appendChild(t.content)\r\n        })\r\n\r\n        if (log) {\r\n            // Wrap lines starting with \"E\" with span.error to color those lines red\r\n            const wrappedLog = log.replace(/^E.*$/gm, (match) => `<span class=\"error\">${match}</span>`)\r\n            resultBody.querySelector('.log').innerHTML = wrappedLog\r\n        } else {\r\n            resultBody.querySelector('.log').remove()\r\n        }\r\n\r\n        if (collapsed) {\r\n            resultBody.querySelector('.collapsible > td')?.classList.add('collapsed')\r\n            resultBody.querySelector('.extras-row').classList.add('hidden')\r\n        } else {\r\n            resultBody.querySelector('.collapsible > td')?.classList.remove('collapsed')\r\n        }\r\n\r\n        const media = []\r\n        extras?.forEach(({ name, format_type, content }) => {\r\n            if (['image', 'video'].includes(format_type)) {\r\n                media.push({ path: content, name, format_type })\r\n            }\r\n\r\n            if (format_type === 'html') {\r\n                resultBody.querySelector('.extraHTML').insertAdjacentHTML('beforeend', `<div>${content}</div>`)\r\n            }\r\n        })\r\n        mediaViewer.setup(resultBody, media)\r\n\r\n        // Add custom html from the pytest_html_results_table_html hook\r\n        tableHtml?.forEach((item) => {\r\n            resultBody.querySelector('td[class=\"extra\"]').insertAdjacentHTML('beforeend', item)\r\n        })\r\n\r\n        return resultBody\r\n    },\r\n}\r\n\r\nmodule.exports = {\r\n    dom,\r\n    htmlToElements,\r\n    find,\r\n    findAll,\r\n}\r\n\r\n},{\"./mediaviewer.js\":6}],3:[function(require,module,exports){\r\nconst { manager } = require('./datamanager.js')\r\nconst { doSort } = require('./sort.js')\r\nconst storageModule = require('./storage.js')\r\n\r\nconst getFilteredSubSet = (filter) =>\r\n    manager.allData.tests.filter(({ result }) => filter.includes(result.toLowerCase()))\r\n\r\nconst doInitFilter = () => {\r\n    const currentFilter = storageModule.getVisible()\r\n    const filteredSubset = getFilteredSubSet(currentFilter)\r\n    manager.setRender(filteredSubset)\r\n}\r\n\r\nconst doFilter = (type, show) => {\r\n    if (show) {\r\n        storageModule.showCategory(type)\r\n    } else {\r\n        storageModule.hideCategory(type)\r\n    }\r\n\r\n    const currentFilter = storageModule.getVisible()\r\n    const filteredSubset = getFilteredSubSet(currentFilter)\r\n    manager.setRender(filteredSubset)\r\n\r\n    const sortColumn = storageModule.getSort()\r\n    doSort(sortColumn, true)\r\n}\r\n\r\nmodule.exports = {\r\n    doFilter,\r\n    doInitFilter,\r\n}\r\n\r\n},{\"./datamanager.js\":1,\"./sort.js\":7,\"./storage.js\":8}],4:[function(require,module,exports){\r\nconst { redraw, bindEvents, renderStatic } = require('./main.js')\r\nconst { doInitFilter } = require('./filter.js')\r\nconst { doInitSort } = require('./sort.js')\r\nconst { manager } = require('./datamanager.js')\r\nconst data = JSON.parse(document.getElementById('data-container').dataset.jsonblob)\r\n\r\nfunction init() {\r\n    manager.setManager(data)\r\n    doInitFilter()\r\n    doInitSort()\r\n    renderStatic()\r\n    redraw()\r\n    bindEvents()\r\n}\r\n\r\ninit()\r\n\r\n},{\"./datamanager.js\":1,\"./filter.js\":3,\"./main.js\":5,\"./sort.js\":7}],5:[function(require,module,exports){\r\nconst { dom, find, findAll } = require('./dom.js')\r\nconst { manager } = require('./datamanager.js')\r\nconst { doSort } = require('./sort.js')\r\nconst { doFilter } = require('./filter.js')\r\nconst {\r\n    getVisible,\r\n    getCollapsedIds,\r\n    setCollapsedIds,\r\n    getSort,\r\n    getSortDirection,\r\n    possibleFilters,\r\n} = require('./storage.js')\r\n\r\nconst removeChildren = (node) => {\r\n    while (node.firstChild) {\r\n        node.removeChild(node.firstChild)\r\n    }\r\n}\r\n\r\nconst renderStatic = () => {\r\n    const renderEnvironmentTable = () => {\r\n        const environment = manager.environment\r\n        const rows = Object.keys(environment).map((key) => dom.getStaticRow(key, environment[key]))\r\n        const table = document.getElementById('environment')\r\n        removeChildren(table)\r\n        rows.forEach((row) => table.appendChild(row))\r\n    }\r\n    renderEnvironmentTable()\r\n}\r\n\r\nconst addItemToggleListener = (elem) => {\r\n    elem.addEventListener('click', ({ target }) => {\r\n        const id = target.parentElement.dataset.id\r\n        manager.toggleCollapsedItem(id)\r\n\r\n        const collapsedIds = getCollapsedIds()\r\n        if (collapsedIds.includes(id)) {\r\n            const updated = collapsedIds.filter((item) => item !== id)\r\n            setCollapsedIds(updated)\r\n        } else {\r\n            collapsedIds.push(id)\r\n            setCollapsedIds(collapsedIds)\r\n        }\r\n        redraw()\r\n    })\r\n}\r\n\r\nconst renderContent = (tests) => {\r\n    const sortAttr = getSort(manager.initialSort)\r\n    const sortAsc = JSON.parse(getSortDirection())\r\n    const rows = tests.map(dom.getResultTBody)\r\n    const table = document.getElementById('results-table')\r\n    const tableHeader = document.getElementById('results-table-head')\r\n\r\n    const newTable = document.createElement('table')\r\n    newTable.id = 'results-table'\r\n\r\n    // remove all sorting classes and set the relevant\r\n    findAll('.sortable', tableHeader).forEach((elem) => elem.classList.remove('asc', 'desc'))\r\n    tableHeader.querySelector(`.sortable[data-column-type=\"${sortAttr}\"]`)?.classList.add(sortAsc ? 'desc' : 'asc')\r\n    newTable.appendChild(tableHeader)\r\n\r\n    if (!rows.length) {\r\n        const emptyTable = document.getElementById('template_results-table__body--empty').content.cloneNode(true)\r\n        newTable.appendChild(emptyTable)\r\n    } else {\r\n        rows.forEach((row) => {\r\n            if (!!row) {\r\n                findAll('.collapsible td:not(.col-links', row).forEach(addItemToggleListener)\r\n                find('.logexpander', row).addEventListener('click',\r\n                    (evt) => evt.target.parentNode.classList.toggle('expanded'),\r\n                )\r\n                newTable.appendChild(row)\r\n            }\r\n        })\r\n    }\r\n\r\n    table.replaceWith(newTable)\r\n}\r\n\r\nconst renderDerived = () => {\r\n    const currentFilter = getVisible()\r\n    possibleFilters.forEach((result) => {\r\n        const input = document.querySelector(`input[data-test-result=\"${result}\"]`)\r\n        input.checked = currentFilter.includes(result)\r\n    })\r\n}\r\n\r\nconst bindEvents = () => {\r\n    const filterColumn = (evt) => {\r\n        const { target: element } = evt\r\n        const { testResult } = element.dataset\r\n\r\n        doFilter(testResult, element.checked)\r\n        const collapsedIds = getCollapsedIds()\r\n        const updated = manager.renderData.tests.map((test) => {\r\n            return {\r\n                ...test,\r\n                collapsed: collapsedIds.includes(test.id),\r\n            }\r\n        })\r\n        manager.setRender(updated)\r\n        redraw()\r\n    }\r\n\r\n    const header = document.getElementById('environment-header')\r\n    header.addEventListener('click', () => {\r\n        const table = document.getElementById('environment')\r\n        table.classList.toggle('hidden')\r\n        header.classList.toggle('collapsed')\r\n    })\r\n\r\n    findAll('input[name=\"filter_checkbox\"]').forEach((elem) => {\r\n        elem.addEventListener('click', filterColumn)\r\n    })\r\n\r\n    findAll('.sortable').forEach((elem) => {\r\n        elem.addEventListener('click', (evt) => {\r\n            const { target: element } = evt\r\n            const { columnType } = element.dataset\r\n            doSort(columnType)\r\n            redraw()\r\n        })\r\n    })\r\n\r\n    document.getElementById('show_all_details').addEventListener('click', () => {\r\n        manager.allCollapsed = false\r\n        setCollapsedIds([])\r\n        redraw()\r\n    })\r\n    document.getElementById('hide_all_details').addEventListener('click', () => {\r\n        manager.allCollapsed = true\r\n        const allIds = manager.renderData.tests.map((test) => test.id)\r\n        setCollapsedIds(allIds)\r\n        redraw()\r\n    })\r\n}\r\n\r\nconst redraw = () => {\r\n    const { testSubset } = manager\r\n\r\n    renderContent(testSubset)\r\n    renderDerived()\r\n}\r\n\r\nmodule.exports = {\r\n    redraw,\r\n    bindEvents,\r\n    renderStatic,\r\n}\r\n\r\n},{\"./datamanager.js\":1,\"./dom.js\":2,\"./filter.js\":3,\"./sort.js\":7,\"./storage.js\":8}],6:[function(require,module,exports){\r\nclass MediaViewer {\r\n    constructor(assets) {\r\n        this.assets = assets\r\n        this.index = 0\r\n    }\r\n\r\n    nextActive() {\r\n        this.index = this.index === this.assets.length - 1 ? 0 : this.index + 1\r\n        return [this.activeFile, this.index]\r\n    }\r\n\r\n    prevActive() {\r\n        this.index = this.index === 0 ? this.assets.length - 1 : this.index -1\r\n        return [this.activeFile, this.index]\r\n    }\r\n\r\n    get currentIndex() {\r\n        return this.index\r\n    }\r\n\r\n    get activeFile() {\r\n        return this.assets[this.index]\r\n    }\r\n}\r\n\r\n\r\nconst setup = (resultBody, assets) => {\r\n    if (!assets.length) {\r\n        resultBody.querySelector('.media').classList.add('hidden')\r\n        return\r\n    }\r\n\r\n    const mediaViewer = new MediaViewer(assets)\r\n    const container = resultBody.querySelector('.media-container')\r\n    const leftArrow = resultBody.querySelector('.media-container__nav--left')\r\n    const rightArrow = resultBody.querySelector('.media-container__nav--right')\r\n    const mediaName = resultBody.querySelector('.media__name')\r\n    const counter = resultBody.querySelector('.media__counter')\r\n    const imageEl = resultBody.querySelector('img')\r\n    const sourceEl = resultBody.querySelector('source')\r\n    const videoEl = resultBody.querySelector('video')\r\n\r\n    const setImg = (media, index) => {\r\n        if (media?.format_type === 'image') {\r\n            imageEl.src = media.path\r\n\r\n            imageEl.classList.remove('hidden')\r\n            videoEl.classList.add('hidden')\r\n        } else if (media?.format_type === 'video') {\r\n            sourceEl.src = media.path\r\n\r\n            videoEl.classList.remove('hidden')\r\n            imageEl.classList.add('hidden')\r\n        }\r\n\r\n        mediaName.innerText = media?.name\r\n        counter.innerText = `${index + 1} / ${assets.length}`\r\n    }\r\n    setImg(mediaViewer.activeFile, mediaViewer.currentIndex)\r\n\r\n    const moveLeft = () => {\r\n        const [media, index] = mediaViewer.prevActive()\r\n        setImg(media, index)\r\n    }\r\n    const doRight = () => {\r\n        const [media, index] = mediaViewer.nextActive()\r\n        setImg(media, index)\r\n    }\r\n    const openImg = () => {\r\n        window.open(mediaViewer.activeFile.path, '_blank')\r\n    }\r\n    if (assets.length === 1) {\r\n        container.classList.add('media-container--fullscreen')\r\n    } else {\r\n        leftArrow.addEventListener('click', moveLeft)\r\n        rightArrow.addEventListener('click', doRight)\r\n    }\r\n    imageEl.addEventListener('click', openImg)\r\n}\r\n\r\nmodule.exports = {\r\n    setup,\r\n}\r\n\r\n},{}],7:[function(require,module,exports){\r\nconst { manager } = require('./datamanager.js')\r\nconst storageModule = require('./storage.js')\r\n\r\nconst genericSort = (list, key, ascending, customOrder) => {\r\n    let sorted\r\n    if (customOrder) {\r\n        sorted = list.sort((a, b) => {\r\n            const aValue = a.result.toLowerCase()\r\n            const bValue = b.result.toLowerCase()\r\n\r\n            const aIndex = customOrder.findIndex((item) => item.toLowerCase() === aValue)\r\n            const bIndex = customOrder.findIndex((item) => item.toLowerCase() === bValue)\r\n\r\n            // Compare the indices to determine the sort order\r\n            return aIndex - bIndex\r\n        })\r\n    } else {\r\n        sorted = list.sort((a, b) => a[key] === b[key] ? 0 : a[key] > b[key] ? 1 : -1)\r\n    }\r\n\r\n    if (ascending) {\r\n        sorted.reverse()\r\n    }\r\n    return sorted\r\n}\r\n\r\nconst durationSort = (list, ascending) => {\r\n    const parseDuration = (duration) => {\r\n        if (duration.includes(':')) {\r\n            // If it's in the format \"HH:mm:ss\"\r\n            const [hours, minutes, seconds] = duration.split(':').map(Number)\r\n            return (hours * 3600 + minutes * 60 + seconds) * 1000\r\n        } else {\r\n            // If it's in the format \"nnn ms\"\r\n            return parseInt(duration)\r\n        }\r\n    }\r\n    const sorted = list.sort((a, b) => parseDuration(a['duration']) - parseDuration(b['duration']))\r\n    if (ascending) {\r\n        sorted.reverse()\r\n    }\r\n    return sorted\r\n}\r\n\r\nconst doInitSort = () => {\r\n    const type = storageModule.getSort(manager.initialSort)\r\n    const ascending = storageModule.getSortDirection()\r\n    const list = manager.testSubset\r\n    const initialOrder = ['Error', 'Failed', 'Rerun', 'XFailed', 'XPassed', 'Skipped', 'Passed']\r\n\r\n    storageModule.setSort(type)\r\n    storageModule.setSortDirection(ascending)\r\n\r\n    if (type?.toLowerCase() === 'original') {\r\n        manager.setRender(list)\r\n    } else {\r\n        let sortedList\r\n        switch (type) {\r\n        case 'duration':\r\n            sortedList = durationSort(list, ascending)\r\n            break\r\n        case 'result':\r\n            sortedList = genericSort(list, type, ascending, initialOrder)\r\n            break\r\n        default:\r\n            sortedList = genericSort(list, type, ascending)\r\n            break\r\n        }\r\n        manager.setRender(sortedList)\r\n    }\r\n}\r\n\r\nconst doSort = (type, skipDirection) => {\r\n    const newSortType = storageModule.getSort(manager.initialSort) !== type\r\n    const currentAsc = storageModule.getSortDirection()\r\n    let ascending\r\n    if (skipDirection) {\r\n        ascending = currentAsc\r\n    } else {\r\n        ascending = newSortType ? false : !currentAsc\r\n    }\r\n    storageModule.setSort(type)\r\n    storageModule.setSortDirection(ascending)\r\n\r\n    const list = manager.testSubset\r\n    const sortedList = type === 'duration' ? durationSort(list, ascending) : genericSort(list, type, ascending)\r\n    manager.setRender(sortedList)\r\n}\r\n\r\nmodule.exports = {\r\n    doInitSort,\r\n    doSort,\r\n}\r\n\r\n},{\"./datamanager.js\":1,\"./storage.js\":8}],8:[function(require,module,exports){\r\nconst possibleFilters = [\r\n    'passed',\r\n    'skipped',\r\n    'failed',\r\n    'error',\r\n    'xfailed',\r\n    'xpassed',\r\n    'rerun',\r\n]\r\n\r\nconst getVisible = () => {\r\n    const url = new URL(window.location.href)\r\n    const settings = new URLSearchParams(url.search).get('visible')\r\n    const lower = (item) => {\r\n        const lowerItem = item.toLowerCase()\r\n        if (possibleFilters.includes(lowerItem)) {\r\n            return lowerItem\r\n        }\r\n        return null\r\n    }\r\n    return settings === null ?\r\n        possibleFilters :\r\n        [...new Set(settings?.split(',').map(lower).filter((item) => item))]\r\n}\r\n\r\nconst hideCategory = (categoryToHide) => {\r\n    const url = new URL(window.location.href)\r\n    const visibleParams = new URLSearchParams(url.search).get('visible')\r\n    const currentVisible = visibleParams ? visibleParams.split(',') : [...possibleFilters]\r\n    const settings = [...new Set(currentVisible)].filter((f) => f !== categoryToHide).join(',')\r\n\r\n    url.searchParams.set('visible', settings)\r\n    window.history.pushState({}, null, unescape(url.href))\r\n}\r\n\r\nconst showCategory = (categoryToShow) => {\r\n    if (typeof window === 'undefined') {\r\n        return\r\n    }\r\n    const url = new URL(window.location.href)\r\n    const currentVisible = new URLSearchParams(url.search).get('visible')?.split(',').filter(Boolean) ||\r\n        [...possibleFilters]\r\n    const settings = [...new Set([categoryToShow, ...currentVisible])]\r\n    const noFilter = possibleFilters.length === settings.length || !settings.length\r\n\r\n    noFilter ? url.searchParams.delete('visible') : url.searchParams.set('visible', settings.join(','))\r\n    window.history.pushState({}, null, unescape(url.href))\r\n}\r\n\r\nconst getSort = (initialSort) => {\r\n    const url = new URL(window.location.href)\r\n    let sort = new URLSearchParams(url.search).get('sort')\r\n    if (!sort) {\r\n        sort = initialSort || 'result'\r\n    }\r\n    return sort\r\n}\r\n\r\nconst setSort = (type) => {\r\n    const url = new URL(window.location.href)\r\n    url.searchParams.set('sort', type)\r\n    window.history.pushState({}, null, unescape(url.href))\r\n}\r\n\r\nconst getCollapsedCategory = (renderCollapsed) => {\r\n    let categories\r\n    if (typeof window !== 'undefined') {\r\n        const url = new URL(window.location.href)\r\n        const collapsedItems = new URLSearchParams(url.search).get('collapsed')\r\n        switch (true) {\r\n        case !renderCollapsed && collapsedItems === null:\r\n            categories = ['passed']\r\n            break\r\n        case collapsedItems?.length === 0 || /^[\"']{2}$/.test(collapsedItems):\r\n            categories = []\r\n            break\r\n        case /^all$/.test(collapsedItems) || collapsedItems === null && /^all$/.test(renderCollapsed):\r\n            categories = [...possibleFilters]\r\n            break\r\n        default:\r\n            categories = collapsedItems?.split(',').map((item) => item.toLowerCase()) || renderCollapsed\r\n            break\r\n        }\r\n    } else {\r\n        categories = []\r\n    }\r\n    return categories\r\n}\r\n\r\nconst getSortDirection = () => JSON.parse(sessionStorage.getItem('sortAsc')) || false\r\nconst setSortDirection = (ascending) => sessionStorage.setItem('sortAsc', ascending)\r\n\r\nconst getCollapsedIds = () => JSON.parse(sessionStorage.getItem('collapsedIds')) || []\r\nconst setCollapsedIds = (list) => sessionStorage.setItem('collapsedIds', JSON.stringify(list))\r\n\r\nmodule.exports = {\r\n    getVisible,\r\n    hideCategory,\r\n    showCategory,\r\n    getCollapsedIds,\r\n    setCollapsedIds,\r\n    getSort,\r\n    setSort,\r\n    getSortDirection,\r\n    setSortDirection,\r\n    getCollapsedCategory,\r\n    possibleFilters,\r\n}\r\n\r\n},{}]},{},[4]);\r\n    </script>\r\n  </footer>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/reports/test-report.html b/tests/reports/test-report.html
--- a/tests/reports/test-report.html	(revision 3b72c3f417edb7d18310c69f5a2ef731bcd2c2bd)
+++ b/tests/reports/test-report.html	(date 1717396104623)
@@ -7,7 +7,7 @@
   </head>
   <body>
     <h1 id="title">test-report.html</h1>
-    <p>Report generated on 30-May-2024 at 21:43:38 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a>
+    <p>Report generated on 03-Jun-2024 at 09:28:24 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a>
         v4.1.1</p>
     <div id="environment-header">
       <h2>Environment</h2>
@@ -61,7 +61,7 @@
         <h2>Summary</h2>
         <div class="additional-summary prefix">
         </div>
-        <p class="run-count">8 tests took 6 ms.</p>
+        <p class="run-count">0 test took 0 ms.</p>
         <p class="filter">(Un)check the boxes to filter the results.</p>
         <div class="summary__reload">
           <div class="summary__reload__button hidden" onclick="location.reload()">
@@ -73,16 +73,16 @@
           <div class="filters">
             <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="failed" disabled/>
             <span class="failed">0 Failed,</span>
-            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="passed" />
-            <span class="passed">8 Passed,</span>
+            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="passed" disabled/>
+            <span class="passed">0 Passed,</span>
             <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="skipped" disabled/>
             <span class="skipped">0 Skipped,</span>
             <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="xfailed" disabled/>
             <span class="xfailed">0 Expected failures,</span>
             <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="xpassed" disabled/>
             <span class="xpassed">0 Unexpected passes,</span>
-            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="error" disabled/>
-            <span class="error">0 Errors,</span>
+            <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="error" />
+            <span class="error">1 Errors,</span>
             <input checked="true" class="filter" name="filter_checkbox" type="checkbox" data-test-result="rerun" disabled/>
             <span class="rerun">0 Reruns</span>
           </div>
@@ -108,7 +108,7 @@
     </table>
   </body>
   <footer>
-    <div id="data-container" data-jsonblob="{&#34;environment&#34;: {&#34;Python&#34;: &#34;3.12.2&#34;, &#34;Platform&#34;: &#34;Windows-10-10.0.19045-SP0&#34;, &#34;Packages&#34;: {&#34;pytest&#34;: &#34;8.2.1&#34;, &#34;pluggy&#34;: &#34;1.5.0&#34;}, &#34;Plugins&#34;: {&#34;html&#34;: &#34;4.1.1&#34;, &#34;metadata&#34;: &#34;3.1.1&#34;}}, &#34;tests&#34;: {&#34;test_cell.py::TestCell::test_init&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_init&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_init&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_next_mark_state_is_closed&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_next_mark_state_is_closed&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_next_mark_state_is_closed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_next_mark_state_is_opened&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_next_mark_state_is_opened&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_next_mark_state_is_opened&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_next_mark_state_is_questioned&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_next_mark_state_is_questioned&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_next_mark_state_is_questioned&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_closed&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_closed&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_open_state_is_closed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_flagged&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_flagged&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_open_state_is_flagged&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_opened&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_opened&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_open_state_is_opened&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}], &#34;test_cell.py::TestCell::test_open_state_is_questioned&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Passed&#34;, &#34;testId&#34;: &#34;test_cell.py::TestCell::test_open_state_is_questioned&#34;, &#34;duration&#34;: &#34;1 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Passed&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_cell.py::TestCell::test_open_state_is_questioned&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;1 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;No log output captured.&#34;}]}, &#34;renderCollapsed&#34;: [&#34;passed&#34;], &#34;initialSort&#34;: &#34;result&#34;, &#34;title&#34;: &#34;test-report.html&#34;}"></div>
+    <div id="data-container" data-jsonblob="{&#34;environment&#34;: {&#34;Python&#34;: &#34;3.10.6&#34;, &#34;Platform&#34;: &#34;Windows-10-10.0.22631-SP0&#34;, &#34;Packages&#34;: {&#34;pytest&#34;: &#34;8.2.1&#34;, &#34;pluggy&#34;: &#34;1.5.0&#34;}, &#34;Plugins&#34;: {&#34;html&#34;: &#34;4.1.1&#34;, &#34;metadata&#34;: &#34;3.1.1&#34;}}, &#34;tests&#34;: {&#34;test_model.py&#34;: [{&#34;extras&#34;: [], &#34;result&#34;: &#34;Error&#34;, &#34;testId&#34;: &#34;test_model.py::collect&#34;, &#34;duration&#34;: &#34;0 ms&#34;, &#34;resultsTableRow&#34;: [&#34;&lt;td class=\&#34;col-result\&#34;&gt;Error&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-testId\&#34;&gt;test_model.py::collect&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-duration\&#34;&gt;0 ms&lt;/td&gt;&#34;, &#34;&lt;td class=\&#34;col-links\&#34;&gt;&lt;/td&gt;&#34;], &#34;log&#34;: &#34;ImportError while importing test module &amp;#x27;D:\\labsss\\tests\\test_model.py&amp;#x27;.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n..\\.venv\\lib\\site-packages\\_pytest\\python.py:492: in importtestmodule\n    mod = import_path(\n..\\.venv\\lib\\site-packages\\_pytest\\pathlib.py:591: in import_path\n    importlib.import_module(module_name)\nC:\\Users\\aleks\\AppData\\Local\\Programs\\Python\\Python310\\lib\\importlib\\__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n&amp;lt;frozen importlib._bootstrap&amp;gt;:1050: in _gcd_import\n    ???\n&amp;lt;frozen importlib._bootstrap&amp;gt;:1027: in _find_and_load\n    ???\n&amp;lt;frozen importlib._bootstrap&amp;gt;:1006: in _find_and_load_unlocked\n    ???\n&amp;lt;frozen importlib._bootstrap&amp;gt;:688: in _load_unlocked\n    ???\n..\\.venv\\lib\\site-packages\\_pytest\\assertion\\rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntest_model.py:2: in &amp;lt;module&amp;gt;\n    from minesweeper.model import *\n..\\minesweeper\\model.py:3: in &amp;lt;module&amp;gt;\n    from cell import Cell\nE   ModuleNotFoundError: No module named &amp;#x27;cell&amp;#x27;\n&#34;}]}, &#34;renderCollapsed&#34;: [&#34;passed&#34;], &#34;initialSort&#34;: &#34;result&#34;, &#34;title&#34;: &#34;test-report.html&#34;}"></div>
     <script>
       (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
 const { getCollapsedCategory, setCollapsedIds } = require('./storage.js')
Index: .idea/Labs.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.12 (Labs)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Labs.iml b/.idea/Labs.iml
--- a/.idea/Labs.iml	(revision 3b72c3f417edb7d18310c69f5a2ef731bcd2c2bd)
+++ b/.idea/Labs.iml	(date 1717089975808)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.12 (Labs)" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.12 (Labs)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (Labs)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3b72c3f417edb7d18310c69f5a2ef731bcd2c2bd)
+++ b/.idea/misc.xml	(date 1717089975812)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.12 (Labs)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (Labs)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (labsss)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
